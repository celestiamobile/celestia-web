resources:
  repositories:
  - repository: Celestia
    type: github
    endpoint: GithubAuth
    name: celestiamobile/Celestia
    ref: develop
  - repository: apple-android
    type: git
    name: Celestia/apple-android
  - repository: emsdk
    type: github
    endpoint: GithubAuth
    name: emscripten-core/emsdk

trigger:
- main

pool:
  vmImage: 'macos-13'

variables:
  xcodeVersion: ${{ '15.1' }}

steps:
- checkout: self
- checkout: Celestia
- checkout: apple-android
- checkout: emsdk

- script: |
    cd Celestia
    git apply ../celestia-web/patches/gles.patch --ignore-whitespace --whitespace=nowarn
  displayName: 'Apply Patch (OpenGLES)'

- script: |
    cd Celestia
    git apply ../celestia-web/patches/celestia.patch --ignore-whitespace --whitespace=nowarn
  displayName: 'Apply Patch (Celestia)'

- script: |
    cd Celestia
    git apply ../celestia-web/patches/celestia.build.patch --ignore-whitespace --whitespace=nowarn
  displayName: 'Apply Patch (Build)'

- script: brew install wget unzip gperf gettext cmake
  displayName: 'Install Dependencies'

- script: |
    cd apple-android
    git apply ../celestia-web/patches/dependencies.patch --ignore-whitespace --whitespace=nowarn
  displayName: 'Apply Patch (Libraries)'

- task: DownloadGitHubRelease@0
  inputs:
    connection: GithubAuth
    userRepository: celestiamobile/Celestia
    defaultVersionType: 'specificTag'
    version: '1_4_3_rc1'
    itemPattern: 'CelestiaResources1.4.3.zip'
    downloadPath: '$(System.ArtifactsDirectory)'
  displayName: 'Download Resources (Old)'

- task: DownloadGitHubRelease@0
  inputs:
    connection: GithubAuth
    userRepository: celestiamobile/Celestia
    defaultVersionType: 'specificTag'
    version: '1_6_4_rc1'
    itemPattern: 'CelestiaResources1.6.4.zip'
    downloadPath: '$(System.ArtifactsDirectory)'
  displayName: 'Download Resources'

- script: |
    cd Celestia
    unzip $(System.ArtifactsDirectory)/CelestiaResources1.6.4.zip -d .
    unzip $(System.ArtifactsDirectory)/CelestiaResources1.4.3.zip -d old
  displayName: 'Unzip Resources'

- script: |
    cd Celestia

    rm -rf CelestiaResources/data
    rm -rf CelestiaResources/textures
    rm -rf CelestiaResources/models
    rm -rf CelestiaResources/extras
    rm -rf CelestiaResources/extras-standard
    rsync -rv --quiet --exclude='CMakeLists.txt' old/CelestiaResources/data CelestiaResources
    rsync -rv --quiet --exclude='CMakeLists.txt' old/CelestiaResources/textures CelestiaResources
    rsync -rv --quiet --exclude='CMakeLists.txt' old/CelestiaResources/models CelestiaResources
    rsync -rv --quiet --exclude='CMakeLists.txt' old/CelestiaResources/extras-standard CelestiaResources

    rm -rf CelestiaResources/shaders
    rsync -rv --quiet --exclude='CMakeLists.txt' shaders CelestiaResources
    rsync -rv --quiet --exclude='CMakeLists.txt' fonts CelestiaResources
  displayName: 'Fix Resources'

- script: |
    cd emsdk
    ./emsdk install latest
    ./emsdk activate latest
  displayName: 'Install Emscripten'

- script: |
    cd apple-android
    TO_REPLACE="Xcode.app"
    NEW_STRING="Xcode_$(xcodeVersion).app"
    sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" *.txt
    TO_REPLACE="/Users/linfel/Developer/Personal/Celestia/emsdk"
    NEW_STRING="$(pwd)/emsdk"
    sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" emscripten.txt
  displayName: 'Replace Strings'

- script: |
    cd apple-android
    sh ./download.sh
  displayName: 'Download'

- script: |
    cd emsdk
    source ./emsdk_env.sh
    cd ../apple-android
    sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app
    xcodebuild -version
    sh ./prepare_icu.sh
    sh ./build_emscripten.sh
  displayName: 'Build Libraries'

- script: |
    cd emsdk
    source ./emsdk_env.sh
    cd ../Celestia
    mkdir build
    cd build
    emcmake cmake ../ -DENABLE_QT5=OFF \
                      -DENABLE_SDL=ON \
                      -DENABLE_SPICE=OFF \
                      -DENABLE_GLES=ON \
                      -DENABLE_MINIAUDIO=ON \
                      -DENABLE_CELX=ON \
                      -DUSE_ICU=ON \
                      -DENABLE_NLS=ON \
                      -DCMAKE_BUILD_TYPE=Release \
                      -DCMAKE_INSTALL_PREFIX=`pwd`/output \
                      -DIntl_IS_BUILT_IN=OFF \
                      -DLUA_LIBRARY=$(System.DefaultWorkingDirectory)/apple-android/emscripten/lib/liblua.a \
                      -DLUA_LIBRARIES=$(System.DefaultWorkingDirectory)/apple-android/emscripten/lib/liblua.a \
                      -DLUA_INCLUDE_DIR=$(System.DefaultWorkingDirectory)/apple-android/emscripten/include \
                      -DADDITIONAL_FIND_ROOT_PATH=$(System.DefaultWorkingDirectory)/apple-android/emscripten
    make -j4 install
  displayName: 'Build Celestia'

- script: |
    TO_REPLACE='var PACKAGE_NAME="celestia-sdl.data";var REMOTE_PACKAGE_BASE="celestia-sdl.data"'
    NEW_STRING='var PACKAGE_NAME=window.dataBinaryFileOverride;var REMOTE_PACKAGE_BASE=window.dataBinaryFileOverride;'
    sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" Celestia/build/src/celestia/sdl/celestia-sdl.js
    TO_REPLACE='wasmBinaryFile="celestia-sdl.wasm";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}'
    NEW_STRING='wasmBinaryFile=window.wasmBinaryFileOverride;'
    sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" Celestia/build/src/celestia/sdl/celestia-sdl.js

    rm -rf $(Build.ArtifactStagingDirectory)/*
    cp celestia-web/index.html $(Build.ArtifactStagingDirectory)
    cp Celestia/build/src/celestia/sdl/celestia-sdl.js $(Build.ArtifactStagingDirectory)
    cp Celestia/build/src/celestia/sdl/celestia-sdl.wasm $(Build.ArtifactStagingDirectory)
    cp Celestia/build/src/celestia/sdl/celestia-sdl.data $(Build.ArtifactStagingDirectory)
  displayName: 'Fix References'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'web'
    publishLocation: 'Container'
  displayName: 'Publish Artifacts'
